<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>404 NOT FOUND</title><link>https://asukaonly.github.io/</link><description>Recent content on 404 NOT FOUND</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 20 Jan 2018 15:52:41 +0000</lastBuildDate><atom:link href="https://asukaonly.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Play framework源码解析 Part3:Play的初始化与启动</title><link>https://asukaonly.github.io/posts/play-framework/part3play%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%90%AF%E5%8A%A8/</link><pubDate>Sat, 20 Jan 2018 15:52:41 +0000</pubDate><guid>https://asukaonly.github.io/posts/play-framework/part3play%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%90%AF%E5%8A%A8/</guid><description>在上一篇中，我们分析了play的2种启动方式，这一篇，我们来看看Play类的初始化过程
Play类 Link to heading 无论是Server还是ServletWrapper方式运行，在他们的入口中都会运行Play.init()来对Play类进行初始化。那在解析初始化之前，我们先来看看Play类是做什么的，它里面有什么重要的方法。 首先要明确的一点是，Play类是整个Play framework框架的管理、配置中心，它存放了大部分框架需要的成员变量，例如id,配置信息,所有加载的class,使用的插件管理器等等。下图就是Play类中的方法列表。 这其中加注释的几个方法是比较重要的，我们下面便来从init开始一点点剖析Play类中的各个方法。
Play的初始化 Link to heading public static void init(File root, String id) { // Simple things Play.id = id; Play.started = false; Play.applicationPath = root; // 加载所有 play.static 中的记录的类 initStaticStuff(); //猜测play framework的路径 guessFrameworkPath(); // 读取配置文件 readConfiguration(); Play.classes = new ApplicationClasses(); // 初始化日志 Logger.init(); String logLevel = configuration.getProperty(&amp;#34;application.log&amp;#34;, &amp;#34;INFO&amp;#34;); //only override log-level if Logger was not configured manually if( !Logger.configuredManually) { Logger.setUp(logLevel); } Logger.</description></item><item><title>Play framework源码解析 Part2:Server与ServletWrapper</title><link>https://asukaonly.github.io/posts/play-framework/part2server%E4%B8%8Eservletwrapper/</link><pubDate>Thu, 11 Jan 2018 15:16:54 +0000</pubDate><guid>https://asukaonly.github.io/posts/play-framework/part2server%E4%B8%8Eservletwrapper/</guid><description>在上一节中我们剖析了Play framework的启动原理，很容易就能发现Play framework的启动主入口在play.server.Server中，在本节，我们来一起看看Server类中主要发生了什么。
Server类 Link to heading 既然是程序运行的主入口，那么必然是由main方法进入的，Server类中的main方法十分简单。源码如下:
public static void main(String[] args) throws Exception { File root = new File(System.getProperty(&amp;#34;application.path&amp;#34;)); //获取参数中的precompiled if (System.getProperty(&amp;#34;precompiled&amp;#34;, &amp;#34;false&amp;#34;).equals(&amp;#34;true&amp;#34;)) { Play.usePrecompiled = true; } //获取参数中的writepid if (System.getProperty(&amp;#34;writepid&amp;#34;, &amp;#34;false&amp;#34;).equals(&amp;#34;true&amp;#34;)) { //这个方法的作用是检查当前目录下是否存在server.pid文件，若存在表明当前已有程序在运行 writePID(root); } //Play类的初始化 Play.init(root, System.getProperty(&amp;#34;play.id&amp;#34;, &amp;#34;&amp;#34;)); if (System.getProperty(&amp;#34;precompile&amp;#34;) == null) { //Server类初始化 new Server(args); } else { Logger.info(&amp;#34;Done.&amp;#34;); } } main方法执行的操作很简单:
获取程序路径 检查是否存在precompiled参数 检查是否存在writepid参数，若存在则检查是否存在server.pid文件，若存在则表明已有程序在运行，不存在则将当前程序pid写入server.pid play类初始化 检查是否存在precompile参数项，若存在表示是个预编译行为，结束运行，若没有则启动服务 这其中最重要的便是Play类的初始化以及Server类的初始化 这里我们先来看Server类的初始化过程，现在可以先简单的将Play类的初始化理解为Play框架中一些常量的初始化以及日志、配置文件、路由信息等配置的读取。 这里贴一下Server类的初始化过程：
public Server(String[] args) { //设置文件编码为UTF-8 System.</description></item><item><title>Play framework源码解析 Part1: Play framework 介绍、项目构成及启动脚本解析</title><link>https://asukaonly.github.io/posts/play-framework/part1-play-framework-%E4%BB%8B%E7%BB%8D%E9%A1%B9%E7%9B%AE%E6%9E%84%E6%88%90%E5%8F%8A%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%E8%A7%A3%E6%9E%90/</link><pubDate>Wed, 03 Jan 2018 13:56:21 +0000</pubDate><guid>https://asukaonly.github.io/posts/play-framework/part1-play-framework-%E4%BB%8B%E7%BB%8D%E9%A1%B9%E7%9B%AE%E6%9E%84%E6%88%90%E5%8F%8A%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%E8%A7%A3%E6%9E%90/</guid><description>注：本系列文章所用play版本为1.2.6
介绍 Link to heading Play framework是个轻量级的RESTful框架，致力于让java程序员实现快速高效开发，它具有以下几个方面的优势：
热加载。在调试模式下，所有修改会及时生效。 抛弃xml配置文件。约定大于配置。 支持异步编程 无状态mvc框架，拓展性良好 简单的路由设置 这里附上Play framework的文档地址，官方有更为详尽的功能叙述。Play framework文档
项目构成 Link to heading play framework的初始化非常简单，只要下载了play的软件包后，在命令行中运行play new xxx即可初始化一个项目。 自动生成的项目结构如下：
运行play程序也非常简单，在项目目录下使用
play run 即可运行。
启动脚本解析 Link to heading play framework软件包目录 Link to heading 为了更好的了解play framework的运作原理，我们来从play framework的启动脚本开始分析，分析启动脚本有助于我们了解play framework的运行过程。
play的启动脚本是使用python编写的，脚本的入口为play软件包根目录下的play文件,下面我们将从play这个脚本的主入口开始分析。
play脚本解析 Link to heading play脚本在开头引入了3个类，分别为play.cmdloader,play.application,play.utils，从添加的系统参数中可以看出play启动脚本的存放路径为 framework/pym cmdloader.py的主要作用为加载framework/pym/commands下的各个脚本文件，用于之后对命令参数的解释运行 application.py的主要作用为解析项目路径下conf/中的配置文件、加载模块、拼接最后运行的java命令
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), &amp;#39;framework&amp;#39;, &amp;#39;pym&amp;#39;)) from play.cmdloader import CommandLoader from play.application import PlayApplication from play.utils import * 在脚本的开头，有这么一段代码，意味着只要在play主程序根目录下创建一个名为id的文件，即可设置默认的框架id
play_env[&amp;#34;id_file&amp;#34;] = os.path.join(play_env[&amp;#39;basedir&amp;#39;], &amp;#39;id&amp;#39;) if os.</description></item><item><title>Play framework源码解析目录</title><link>https://asukaonly.github.io/posts/play-framework/play-framework%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%9B%AE%E5%BD%95/</link><pubDate>Mon, 01 Jan 2018 13:09:05 +0000</pubDate><guid>https://asukaonly.github.io/posts/play-framework/play-framework%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%9B%AE%E5%BD%95/</guid><description>这里对Play framework源码解析做一个大致规划目录，要写的篇章如下
目录 Link to heading Play framework 介绍、项目构成及启动脚本解析&amp;ndash;已完成 Server与ServletWrapper&amp;ndash;已完成 Play的初始化与启动&amp;ndash;已完成 ActionInvoker与mvc 模板渲染 Play插件 classloader与字节码增强 测试 数据库拓展 辅助工具类 对Play的一些思考及优化方案</description></item></channel></rss>